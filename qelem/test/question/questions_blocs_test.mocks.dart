// Mocks generated by Mockito 5.2.0 from annotations
// in qelem/test/question/questions_blocs_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:qelem/domain/auth/user.dart' as _i5;
import 'package:qelem/domain/common/vote.dart' as _i10;
import 'package:qelem/domain/question/question.dart' as _i6;
import 'package:qelem/domain/question/question_form.dart' as _i7;
import 'package:qelem/infrastructure/auth/auth_repository.dart' as _i3;
import 'package:qelem/infrastructure/question/question_api.dart' as _i2;
import 'package:qelem/infrastructure/question/question_repository.dart' as _i8;
import 'package:qelem/util/either.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeQuestionApi_0 extends _i1.Fake implements _i2.QuestionApi {}

class _FakeAuthRepository_1 extends _i1.Fake implements _i3.AuthRepository {}

class _FakeEither_2<T> extends _i1.Fake implements _i4.Either<T> {}

class _FakeUser_3 extends _i1.Fake implements _i5.User {}

class _FakeDateTime_4 extends _i1.Fake implements DateTime {}

class _Fake$QuestionCopyWith_5<$Res> extends _i1.Fake
    implements _i6.$QuestionCopyWith<$Res> {}

class _Fake$QuestionFormCopyWith_6<$Res> extends _i1.Fake
    implements _i7.$QuestionFormCopyWith<$Res> {}

/// A class which mocks [QuestionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionRepository extends _i1.Mock
    implements _i8.QuestionRepository {
  MockQuestionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.QuestionApi get questionApi =>
      (super.noSuchMethod(Invocation.getter(#questionApi),
          returnValue: _FakeQuestionApi_0()) as _i2.QuestionApi);
  @override
  _i3.AuthRepository get authRepository =>
      (super.noSuchMethod(Invocation.getter(#authRepository),
          returnValue: _FakeAuthRepository_1()) as _i3.AuthRepository);
  @override
  _i9.Future<_i4.Either<List<_i6.Question>>> getMyQuestions() =>
      (super.noSuchMethod(Invocation.method(#getMyQuestions, []),
              returnValue: Future<_i4.Either<List<_i6.Question>>>.value(
                  _FakeEither_2<List<_i6.Question>>()))
          as _i9.Future<_i4.Either<List<_i6.Question>>>);
  @override
  _i9.Future<_i4.Either<List<_i6.Question>>> getAllQuestions() =>
      (super.noSuchMethod(Invocation.method(#getAllQuestions, []),
              returnValue: Future<_i4.Either<List<_i6.Question>>>.value(
                  _FakeEither_2<List<_i6.Question>>()))
          as _i9.Future<_i4.Either<List<_i6.Question>>>);
  @override
  _i9.Future<_i4.Either<_i6.Question>> getQuestionById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getQuestionById, [id]),
              returnValue: Future<_i4.Either<_i6.Question>>.value(
                  _FakeEither_2<_i6.Question>()))
          as _i9.Future<_i4.Either<_i6.Question>>);
  @override
  _i9.Future<_i4.Either<_i6.Question>> createQuestion(
          _i7.QuestionForm? questionForm) =>
      (super.noSuchMethod(Invocation.method(#createQuestion, [questionForm]),
              returnValue: Future<_i4.Either<_i6.Question>>.value(
                  _FakeEither_2<_i6.Question>()))
          as _i9.Future<_i4.Either<_i6.Question>>);
  @override
  _i9.Future<_i4.Either<void>> deleteQuestion(int? id) => (super.noSuchMethod(
          Invocation.method(#deleteQuestion, [id]),
          returnValue: Future<_i4.Either<void>>.value(_FakeEither_2<void>()))
      as _i9.Future<_i4.Either<void>>);
  @override
  _i9.Future<_i4.Either<_i6.Question>> updateQuestion(
          _i7.QuestionForm? questionForm, int? questionId) =>
      (super.noSuchMethod(
              Invocation.method(#updateQuestion, [questionForm, questionId]),
              returnValue: Future<_i4.Either<_i6.Question>>.value(
                  _FakeEither_2<_i6.Question>()))
          as _i9.Future<_i4.Either<_i6.Question>>);
  @override
  _i9.Future<_i4.Either<_i6.Question>> voteQuestion(
          int? questionId, _i10.Vote? vote) =>
      (super.noSuchMethod(Invocation.method(#voteQuestion, [questionId, vote]),
              returnValue: Future<_i4.Either<_i6.Question>>.value(
                  _FakeEither_2<_i6.Question>()))
          as _i9.Future<_i4.Either<_i6.Question>>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i5.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  String get userName =>
      (super.noSuchMethod(Invocation.getter(#userName), returnValue: '')
          as String);
  @override
  String get firstName =>
      (super.noSuchMethod(Invocation.getter(#firstName), returnValue: '')
          as String);
  @override
  String get lastName =>
      (super.noSuchMethod(Invocation.getter(#lastName), returnValue: '')
          as String);
  @override
  String get profilePicture =>
      (super.noSuchMethod(Invocation.getter(#profilePicture), returnValue: '')
          as String);
}

/// A class which mocks [Question].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestion extends _i1.Mock implements _i6.Question {
  MockQuestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  String get topic =>
      (super.noSuchMethod(Invocation.getter(#topic), returnValue: '')
          as String);
  @override
  String get content =>
      (super.noSuchMethod(Invocation.getter(#content), returnValue: '')
          as String);
  @override
  _i5.User get author => (super.noSuchMethod(Invocation.getter(#author),
      returnValue: _FakeUser_3()) as _i5.User);
  @override
  int get upVotes =>
      (super.noSuchMethod(Invocation.getter(#upVotes), returnValue: 0) as int);
  @override
  int get downVotes =>
      (super.noSuchMethod(Invocation.getter(#downVotes), returnValue: 0)
          as int);
  @override
  _i10.Vote get userVote => (super.noSuchMethod(Invocation.getter(#userVote),
      returnValue: _i10.Vote.upVote) as _i10.Vote);
  @override
  DateTime get createdAt => (super.noSuchMethod(Invocation.getter(#createdAt),
      returnValue: _FakeDateTime_4()) as DateTime);
  @override
  DateTime get updatedAt => (super.noSuchMethod(Invocation.getter(#updatedAt),
      returnValue: _FakeDateTime_4()) as DateTime);
  @override
  _i6.$QuestionCopyWith<_i6.Question> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$QuestionCopyWith_5<_i6.Question>())
          as _i6.$QuestionCopyWith<_i6.Question>);
}

/// A class which mocks [QuestionForm].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionForm extends _i1.Mock implements _i7.QuestionForm {
  MockQuestionForm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get topic =>
      (super.noSuchMethod(Invocation.getter(#topic), returnValue: '')
          as String);
  @override
  String get content =>
      (super.noSuchMethod(Invocation.getter(#content), returnValue: '')
          as String);
  @override
  _i7.$QuestionFormCopyWith<_i7.QuestionForm> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$QuestionFormCopyWith_6<_i7.QuestionForm>())
          as _i7.$QuestionFormCopyWith<_i7.QuestionForm>);
}
