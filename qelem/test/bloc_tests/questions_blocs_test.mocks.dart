// Mocks generated by Mockito 5.2.0 from annotations
// in qelem/test/bloc_tests/questions_blocs_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;

import 'package:mockito/mockito.dart' as _i1;
import 'package:qelem/data/local/local_database/qelem_local_storage.dart'
    as _i4;
import 'package:qelem/domain/auth/auth_repository_interface.dart' as _i3;
import 'package:qelem/domain/auth/change_password_form.dart' as _i19;
import 'package:qelem/domain/auth/login_form.dart' as _i18;
import 'package:qelem/domain/auth/login_response.dart' as _i17;
import 'package:qelem/domain/auth/registration_form.dart' as _i16;
import 'package:qelem/domain/auth/user.dart' as _i6;
import 'package:qelem/domain/auth/user_role.dart' as _i12;
import 'package:qelem/domain/common/vote.dart' as _i11;
import 'package:qelem/domain/question/question.dart' as _i7;
import 'package:qelem/domain/question/question_form.dart' as _i8;
import 'package:qelem/domain/tag/tag.dart' as _i13;
import 'package:qelem/domain/tag/tag_name.dart' as _i15;
import 'package:qelem/infrastructure/question/question_api.dart' as _i2;
import 'package:qelem/infrastructure/question/question_repository.dart' as _i9;
import 'package:qelem/infrastructure/tag/tag_repository.dart' as _i14;
import 'package:qelem/util/either.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeQuestionApi_0 extends _i1.Fake implements _i2.QuestionApi {}

class _FakeAuthRepositoryInterface_1 extends _i1.Fake
    implements _i3.AuthRepositoryInterface {}

class _FakeDatabaseHelper_2 extends _i1.Fake implements _i4.DatabaseHelper {}

class _FakeEither_3<T> extends _i1.Fake implements _i5.Either<T> {}

class _FakeUser_4 extends _i1.Fake implements _i6.User {}

class _FakeDateTime_5 extends _i1.Fake implements DateTime {}

class _Fake$QuestionCopyWith_6<$Res> extends _i1.Fake
    implements _i7.$QuestionCopyWith<$Res> {}

class _Fake$QuestionFormCopyWith_7<$Res> extends _i1.Fake
    implements _i8.$QuestionFormCopyWith<$Res> {}

/// A class which mocks [QuestionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionRepository extends _i1.Mock
    implements _i9.QuestionRepository {
  MockQuestionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.QuestionApi get questionApi =>
      (super.noSuchMethod(Invocation.getter(#questionApi),
          returnValue: _FakeQuestionApi_0()) as _i2.QuestionApi);
  @override
  _i3.AuthRepositoryInterface get authRepository =>
      (super.noSuchMethod(Invocation.getter(#authRepository),
              returnValue: _FakeAuthRepositoryInterface_1())
          as _i3.AuthRepositoryInterface);
  @override
  _i4.DatabaseHelper get databaseHelper =>
      (super.noSuchMethod(Invocation.getter(#databaseHelper),
          returnValue: _FakeDatabaseHelper_2()) as _i4.DatabaseHelper);
  @override
  _i10.Future<_i5.Either<List<_i7.Question>>> getMyQuestions() =>
      (super.noSuchMethod(Invocation.method(#getMyQuestions, []),
              returnValue: Future<_i5.Either<List<_i7.Question>>>.value(
                  _FakeEither_3<List<_i7.Question>>()))
          as _i10.Future<_i5.Either<List<_i7.Question>>>);
  @override
  _i10.Future<_i5.Either<List<_i7.Question>>> getAllQuestions() =>
      (super.noSuchMethod(Invocation.method(#getAllQuestions, []),
              returnValue: Future<_i5.Either<List<_i7.Question>>>.value(
                  _FakeEither_3<List<_i7.Question>>()))
          as _i10.Future<_i5.Either<List<_i7.Question>>>);
  @override
  _i10.Future<_i5.Either<_i7.Question>> getQuestionById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getQuestionById, [id]),
              returnValue: Future<_i5.Either<_i7.Question>>.value(
                  _FakeEither_3<_i7.Question>()))
          as _i10.Future<_i5.Either<_i7.Question>>);
  @override
  _i10.Future<_i5.Either<_i7.Question>> createQuestion(
          _i8.QuestionForm? questionForm) =>
      (super.noSuchMethod(Invocation.method(#createQuestion, [questionForm]),
              returnValue: Future<_i5.Either<_i7.Question>>.value(
                  _FakeEither_3<_i7.Question>()))
          as _i10.Future<_i5.Either<_i7.Question>>);
  @override
  _i10.Future<_i5.Either<void>> deleteQuestion(int? id) => (super.noSuchMethod(
          Invocation.method(#deleteQuestion, [id]),
          returnValue: Future<_i5.Either<void>>.value(_FakeEither_3<void>()))
      as _i10.Future<_i5.Either<void>>);
  @override
  _i10.Future<_i5.Either<_i7.Question>> updateQuestion(
          _i8.QuestionForm? questionForm, int? questionId) =>
      (super.noSuchMethod(
              Invocation.method(#updateQuestion, [questionForm, questionId]),
              returnValue: Future<_i5.Either<_i7.Question>>.value(
                  _FakeEither_3<_i7.Question>()))
          as _i10.Future<_i5.Either<_i7.Question>>);
  @override
  _i10.Future<_i5.Either<_i7.Question>> voteQuestion(
          int? questionId, _i11.Vote? vote) =>
      (super.noSuchMethod(Invocation.method(#voteQuestion, [questionId, vote]),
              returnValue: Future<_i5.Either<_i7.Question>>.value(
                  _FakeEither_3<_i7.Question>()))
          as _i10.Future<_i5.Either<_i7.Question>>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i6.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  String get userName =>
      (super.noSuchMethod(Invocation.getter(#userName), returnValue: '')
          as String);
  @override
  String get firstName =>
      (super.noSuchMethod(Invocation.getter(#firstName), returnValue: '')
          as String);
  @override
  String get lastName =>
      (super.noSuchMethod(Invocation.getter(#lastName), returnValue: '')
          as String);
  @override
  String get profilePicture =>
      (super.noSuchMethod(Invocation.getter(#profilePicture), returnValue: '')
          as String);
  @override
  _i12.Role get role => (super.noSuchMethod(Invocation.getter(#role),
      returnValue: _i12.Role.admin) as _i12.Role);
}

/// A class which mocks [Question].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestion extends _i1.Mock implements _i7.Question {
  MockQuestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  String get topic =>
      (super.noSuchMethod(Invocation.getter(#topic), returnValue: '')
          as String);
  @override
  String get content =>
      (super.noSuchMethod(Invocation.getter(#content), returnValue: '')
          as String);
  @override
  _i6.User get author => (super.noSuchMethod(Invocation.getter(#author),
      returnValue: _FakeUser_4()) as _i6.User);
  @override
  int get upVotes =>
      (super.noSuchMethod(Invocation.getter(#upVotes), returnValue: 0) as int);
  @override
  int get downVotes =>
      (super.noSuchMethod(Invocation.getter(#downVotes), returnValue: 0)
          as int);
  @override
  _i11.Vote get userVote => (super.noSuchMethod(Invocation.getter(#userVote),
      returnValue: _i11.Vote.upVote) as _i11.Vote);
  @override
  DateTime get createdAt => (super.noSuchMethod(Invocation.getter(#createdAt),
      returnValue: _FakeDateTime_5()) as DateTime);
  @override
  DateTime get updatedAt => (super.noSuchMethod(Invocation.getter(#updatedAt),
      returnValue: _FakeDateTime_5()) as DateTime);
  @override
  List<_i13.Tag> get tags =>
      (super.noSuchMethod(Invocation.getter(#tags), returnValue: <_i13.Tag>[])
          as List<_i13.Tag>);
  @override
  _i7.$QuestionCopyWith<_i7.Question> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$QuestionCopyWith_6<_i7.Question>())
          as _i7.$QuestionCopyWith<_i7.Question>);
}

/// A class which mocks [QuestionForm].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionForm extends _i1.Mock implements _i8.QuestionForm {
  MockQuestionForm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get topic =>
      (super.noSuchMethod(Invocation.getter(#topic), returnValue: '')
          as String);
  @override
  String get content =>
      (super.noSuchMethod(Invocation.getter(#content), returnValue: '')
          as String);
  @override
  List<_i13.Tag> get tags =>
      (super.noSuchMethod(Invocation.getter(#tags), returnValue: <_i13.Tag>[])
          as List<_i13.Tag>);
  @override
  _i8.$QuestionFormCopyWith<_i8.QuestionForm> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$QuestionFormCopyWith_7<_i8.QuestionForm>())
          as _i8.$QuestionFormCopyWith<_i8.QuestionForm>);
}

/// A class which mocks [TagRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagRepository extends _i1.Mock implements _i14.TagRepository {
  MockTagRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i5.Either<List<_i13.Tag>>> getTags() =>
      (super.noSuchMethod(Invocation.method(#getTags, []),
              returnValue: Future<_i5.Either<List<_i13.Tag>>>.value(
                  _FakeEither_3<List<_i13.Tag>>()))
          as _i10.Future<_i5.Either<List<_i13.Tag>>>);
  @override
  _i10.Future<_i5.Either<_i13.Tag>> createTag(_i15.TagName? tagName) =>
      (super.noSuchMethod(Invocation.method(#createTag, [tagName]),
              returnValue:
                  Future<_i5.Either<_i13.Tag>>.value(_FakeEither_3<_i13.Tag>()))
          as _i10.Future<_i5.Either<_i13.Tag>>);
  @override
  _i10.Future<_i5.Either<_i13.Tag>> updateTag(_i13.Tag? tag) =>
      (super.noSuchMethod(Invocation.method(#updateTag, [tag]),
              returnValue:
                  Future<_i5.Either<_i13.Tag>>.value(_FakeEither_3<_i13.Tag>()))
          as _i10.Future<_i5.Either<_i13.Tag>>);
}

/// A class which mocks [AuthRepositoryInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepositoryInterface extends _i1.Mock
    implements _i3.AuthRepositoryInterface {
  MockAuthRepositoryInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i5.Either<_i6.User>> register(
          {_i16.RegistrationForm? registerForm}) =>
      (super.noSuchMethod(
              Invocation.method(#register, [], {#registerForm: registerForm}),
              returnValue:
                  Future<_i5.Either<_i6.User>>.value(_FakeEither_3<_i6.User>()))
          as _i10.Future<_i5.Either<_i6.User>>);
  @override
  _i10.Future<_i5.Either<_i17.LoginReponse>> login(
          {_i18.LoginForm? loginForm}) =>
      (super.noSuchMethod(
              Invocation.method(#login, [], {#loginForm: loginForm}),
              returnValue: Future<_i5.Either<_i17.LoginReponse>>.value(
                  _FakeEither_3<_i17.LoginReponse>()))
          as _i10.Future<_i5.Either<_i17.LoginReponse>>);
  @override
  _i10.Future<_i5.Either<void>> changePassword(
          {_i19.ChangePasswordForm? changePasswordForm}) =>
      (super.noSuchMethod(
          Invocation.method(
              #changePassword, [], {#changePasswordForm: changePasswordForm}),
          returnValue:
              Future<_i5.Either<void>>.value(_FakeEither_3<void>())) as _i10
          .Future<_i5.Either<void>>);
  @override
  _i10.Future<String?> getAuthToken() =>
      (super.noSuchMethod(Invocation.method(#getAuthToken, []),
          returnValue: Future<String?>.value()) as _i10.Future<String?>);
  @override
  _i10.Future<void> logout() => (super.noSuchMethod(
      Invocation.method(#logout, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<_i6.User?> getAuthenticatedUser() =>
      (super.noSuchMethod(Invocation.method(#getAuthenticatedUser, []),
          returnValue: Future<_i6.User?>.value()) as _i10.Future<_i6.User?>);
}
