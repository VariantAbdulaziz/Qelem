// Mocks generated by Mockito 5.2.0 from annotations
// in qelem/test/widget_tests/change_password_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:qelem/application/change_password/change_password_bloc.dart'
    as _i5;
import 'package:qelem/application/change_password/change_password_event.dart'
    as _i7;
import 'package:qelem/application/change_password/change_password_state.dart'
    as _i2;
import 'package:qelem/domain/auth/change_password_form.dart' as _i4;
import 'package:qelem/domain/auth/password.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeChangePasswordState_0 extends _i1.Fake
    implements _i2.ChangePasswordState {}

class _FakePassword_1 extends _i1.Fake implements _i3.Password {}

class _Fake$ChangePasswordFormCopyWith_2<$Res> extends _i1.Fake
    implements _i4.$ChangePasswordFormCopyWith<$Res> {}

/// A class which mocks [ChangePasswordBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePasswordBloc extends _i1.Mock
    implements _i5.ChangePasswordBloc {
  MockChangePasswordBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChangePasswordState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeChangePasswordState_0()) as _i2.ChangePasswordState);
  @override
  _i6.Stream<_i2.ChangePasswordState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.ChangePasswordState>.empty())
          as _i6.Stream<_i2.ChangePasswordState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i7.ChangePasswordEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i7.ChangePasswordEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.ChangePasswordState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i7.ChangePasswordEvent>(
          _i8.EventHandler<E, _i2.ChangePasswordState>? handler,
          {_i8.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i8.Transition<_i7.ChangePasswordEvent, _i2.ChangePasswordState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void onChange(_i8.Change<_i2.ChangePasswordState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ChangePasswordForm].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePasswordForm extends _i1.Mock
    implements _i4.ChangePasswordForm {
  MockChangePasswordForm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Password get currentPassword =>
      (super.noSuchMethod(Invocation.getter(#currentPassword),
          returnValue: _FakePassword_1()) as _i3.Password);
  @override
  _i3.Password get newPassword =>
      (super.noSuchMethod(Invocation.getter(#newPassword),
          returnValue: _FakePassword_1()) as _i3.Password);
  @override
  _i4.$ChangePasswordFormCopyWith<_i4.ChangePasswordForm> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue:
                  _Fake$ChangePasswordFormCopyWith_2<_i4.ChangePasswordForm>())
          as _i4.$ChangePasswordFormCopyWith<_i4.ChangePasswordForm>);
}
