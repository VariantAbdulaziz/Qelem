// Mocks generated by Mockito 5.2.0 from annotations
// in qelem/test/widget_tests/home_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:qelem/application/question/questions_list/questions_list_bloc.dart'
    as _i6;
import 'package:qelem/application/question/questions_list/questions_list_event.dart'
    as _i8;
import 'package:qelem/application/question/questions_list/questions_list_state.dart'
    as _i3;
import 'package:qelem/domain/auth/user.dart' as _i4;
import 'package:qelem/domain/common/vote.dart' as _i10;
import 'package:qelem/domain/question/question.dart' as _i5;
import 'package:qelem/domain/tag/tag.dart' as _i11;
import 'package:qelem/infrastructure/question/question_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeQuestionRepository_0 extends _i1.Fake
    implements _i2.QuestionRepository {}

class _FakeQuestionsListState_1 extends _i1.Fake
    implements _i3.QuestionsListState {}

class _FakeUser_2 extends _i1.Fake implements _i4.User {}

class _FakeDateTime_3 extends _i1.Fake implements DateTime {}

class _Fake$QuestionCopyWith_4<$Res> extends _i1.Fake
    implements _i5.$QuestionCopyWith<$Res> {}

/// A class which mocks [QuestionsListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionsListBloc extends _i1.Mock implements _i6.QuestionsListBloc {
  MockQuestionsListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.QuestionRepository get questionRepository =>
      (super.noSuchMethod(Invocation.getter(#questionRepository),
          returnValue: _FakeQuestionRepository_0()) as _i2.QuestionRepository);
  @override
  _i3.QuestionsListState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeQuestionsListState_1()) as _i3.QuestionsListState);
  @override
  _i7.Stream<_i3.QuestionsListState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.QuestionsListState>.empty())
          as _i7.Stream<_i3.QuestionsListState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i8.QuestionsListEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.QuestionsListEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.QuestionsListState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i8.QuestionsListEvent>(
          _i9.EventHandler<E, _i3.QuestionsListState>? handler,
          {_i9.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i9.Transition<_i8.QuestionsListEvent, _i3.QuestionsListState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i7.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  void onChange(_i9.Change<_i3.QuestionsListState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [Question].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestion extends _i1.Mock implements _i5.Question {
  MockQuestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  String get topic =>
      (super.noSuchMethod(Invocation.getter(#topic), returnValue: '')
          as String);
  @override
  String get content =>
      (super.noSuchMethod(Invocation.getter(#content), returnValue: '')
          as String);
  @override
  _i4.User get author => (super.noSuchMethod(Invocation.getter(#author),
      returnValue: _FakeUser_2()) as _i4.User);
  @override
  int get upVotes =>
      (super.noSuchMethod(Invocation.getter(#upVotes), returnValue: 0) as int);
  @override
  int get downVotes =>
      (super.noSuchMethod(Invocation.getter(#downVotes), returnValue: 0)
          as int);
  @override
  _i10.Vote get userVote => (super.noSuchMethod(Invocation.getter(#userVote),
      returnValue: _i10.Vote.upVote) as _i10.Vote);
  @override
  DateTime get createdAt => (super.noSuchMethod(Invocation.getter(#createdAt),
      returnValue: _FakeDateTime_3()) as DateTime);
  @override
  DateTime get updatedAt => (super.noSuchMethod(Invocation.getter(#updatedAt),
      returnValue: _FakeDateTime_3()) as DateTime);
  @override
  List<_i11.Tag> get tags =>
      (super.noSuchMethod(Invocation.getter(#tags), returnValue: <_i11.Tag>[])
          as List<_i11.Tag>);
  @override
  _i5.$QuestionCopyWith<_i5.Question> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$QuestionCopyWith_4<_i5.Question>())
          as _i5.$QuestionCopyWith<_i5.Question>);
}
