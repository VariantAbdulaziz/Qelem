// Mocks generated by Mockito 5.2.0 from annotations
// in qelem/test/infrastructure/auth/auth_api_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:qelem/util/my_http_client.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i2.StreamedResponse {
}

/// A class which mocks [MyHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyHttpClient extends _i1.Mock implements _i3.MyHttpClient {
  MockMyHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set authToken(String? value) =>
      super.noSuchMethod(Invocation.setter(#authToken, value),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.Response> get(String? url,
          {Map<String, String>? headers = const {}}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> post(String? url,
          {Map<String, String>? headers = const {},
          Object? body,
          String? contentType = r'application/json'}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #contentType: contentType}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> put(String? url,
          {Map<String, String>? headers = const {},
          Object? body,
          String? contentType = r'application/json'}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #contentType: contentType}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> patch(String? url,
          {Map<String, String>? headers = const {},
          Object? body,
          String? contentType = r'application/json'}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #contentType: contentType}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> delete(String? url,
          {Map<String, String>? headers = const {},
          Object? body,
          String? contentType = r'application/json'}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #contentType: contentType}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.StreamedResponse> multiPartRequest(String? url, String? method,
          {Map<String, String>? headers = const {},
          Map<String, dynamic>? body = const {},
          Map<String, _i5.File>? files = const {}}) =>
      (super.noSuchMethod(
              Invocation.method(#multiPartRequest, [url, method],
                  {#headers: headers, #body: body, #files: files}),
              returnValue:
                  Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i4.Future<_i2.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
